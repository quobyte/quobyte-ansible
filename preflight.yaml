- hosts: localhost 
  any_errors_fatal: true
  vars_files:
    - vars/ansible-vars
  tasks:
    - name: Install necessary Ansible collection that do not come with ansible-core
      community.general.ansible_galaxy_install:
        type: collection
        name: "{{ item }}"
      when: ansible_facts['os_family'] == "RedHat"
      with_items: 
        - ansible.posix 
        - ansible.utils 

    - set_fact: 
        registry_ipv4_a_record: "{{ lookup('community.general.dig', registry, qtype='SRV') }}"

    - set_fact: 
        registry_frontend_ipv4_a_record: "{{ lookup('community.general.dig', registry_frontend, qtype='SRV') }}"

    - name: Check for DNS errors
      assert: 
        that: registry_ipv4_a_record != "NXDOMAIN" and registry_frontend_ipv4_a_record != "NXDOMAIN"

#    - name: check if backend network variable is valid.
#      debug:
#        msg: "{{ backend_network|ansible.utils.ipaddr('net') }}"
#      when: "ansible_version.full is version_compare('2.1', '>=')" 
#

- hosts: metadataservices
  any_errors_fatal: true
  max_fail_percentage: 1
  serial: 1
  vars_files:
    - vars/ansible-vars
  become: yes
  tasks:

    - name: Read metadata device information
      parted: 
        device: "{{ item }}"
        unit: "GiB"
      register: md_device_info
      with_items: "{{ metadatadevices }}"

    - name: Exit if metadata devices already contain a partition table.
      assert:
        quiet: true
        that: "item.partitions|length <= 0"
        fail_msg: >
          Metadata device {{ item.disk.dev }} on host {{ ansible_host }} contains a partition table.
          You can wipe the partition table using "wipefs -a"
        success_msg: >
          Metadata device {{ item.disk.dev }} on host {{ ansible_host }} seems to be valid.
      with_items: "{{ md_device_info.results }}"

- hosts: quobyteservers,clients
  vars_files:
    - vars/ansible-vars
  become: yes
  ignore_errors: false
  tasks:

    - name: Make sure all hosts are reachable via SSH 
      ansible.builtin.ping:

    - name: Get installed packages 
      package_facts:
        manager: auto

    - name: Install chrony if no other time sync daemon is installed
      apt:
        name: chrony
        state: present 
      when: ansible_facts['os_family'] == "Debian" and 'ntp' not in ansible_facts.packages and 'ntpsec' not in ansible_facts.packages

    - name: Install chrony if no other time sync daemon is installed
      yum: 
        name: chrony 
        state: present
      when: ansible_facts['os_family'] == "RedHat" and 'ntp' not in ansible_facts.packages and 'ntpsec' not in ansible_facts.packages

    - name: Install chrony if no other time sync daemon is installed
      zypper: 
        update_cache: yes
        state: present
        name: chrony
      when: ansible_facts['os_family'] == "Suse" and 'ntp' not in ansible_facts.packages and 'ntpsec' not in ansible_facts.packages

    - name: Make sure needed packages are installed 
      apt:
        name: "{{ item }}"
        state: present 
      when: ansible_facts['os_family'] == "Debian" 
      with_items: 
        - gpg

    - name: Make sure needed packages are installed 
      yum: 
        name: "{{ item }}"
        state: present
      when: ansible_facts['os_family'] == "RedHat"
      with_items: 
        - gpg

    - name: Make sure needed packages are installed 
      zypper: 
        update_cache: yes
        state: present
        name: "{{ item }}"
      when: ansible_facts['os_family'] == "Suse" 
      with_items: 
        - gpg

